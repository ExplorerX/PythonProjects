迭代器和生成器
迭代器：
双下方法：很少直接调用的方法。一般情况下，是通过其他语法触发的
可迭代的——可迭代协议：含有__iter__的方法，判断方法：('__iter__ ' in dir(数据类型)
可带带的一定可以被for循环
迭代器协议：含有__iter__和__next__方法
迭代器一定可迭代，可迭代的通过条用iter()方法得到一个迭代器
迭代器的特点：
    很方便使用，且只能取所有的数据取一次
    节省内存空间


生成器：
生成器的本质就是迭代器
生成器的表现形式
    生成器函数
    生成器表达式
生成器函数：
    含有yield关键字的函数就是生成器函数
    特点：
        调用函数的之后函数不执行，返回一个生成器
        每次调用next方法的时候回取到一个值
        直到取完最后一个，在执行next会报错

def generator():
    for i in range(2000000)
        yield 'wahaha%s' % i

g = generator()  # 调用生成器函数得到一个生成器
ret = g.__next__()  # 每一次执行g.__next__()就是从生成器中取值，预示着生成器函数中的代码继续执行

for i in g:
    print(i)

list(g)

从生成器中取值的几个方法：
    next
    for
    数据类型的强制转换,不够好，占内存
