函数——2天
    函数的定义和调用
    def 函数名(形参):
        函数体
        return 返回值
    调用
    函数名(实参)
    站在形参的角度上：
        位置参数
        *args
        默认参数（陷阱）
        **kwargs
    站在实参的角度上：
        按照位置传
        按照关键字传
    返回值：
        没有返回值：不接收
        返回一个值：用一个变量接收
        返回多个值：用一个变量接收或者使用对应数量的变量接收

闭包函数：在内层函数使用外层函数的变量
装饰器：在不改变原来函数调用方式的情况下，在这个函数的前后添加新的功能
    完美的符合了一个开发原则：开放封闭原则
        对扩展是开放的
        对修改是封闭的
    基础的装饰器：
    def wrapper(func):
        def inner(*args, **kwargs):
            之前添加的代码
            ret = func(*args, **kwargs)   # 被装饰的函数在这里被调用
            之后添加的代码
            return ret
        return inner
    使用装饰器：
    @wrapper
    def func(形参):
        函数体

    完美的装饰器：
        from functools import wraps
        def wrapper(func):
            @wraps(func)
            def inner(*args, **kwargs):
                之前添加的代码
                ret = func(*args, **kwargs)   # 被装饰的函数在这里被调用
                之后添加的代码
                return ret
            return inner

    带参数的装饰器：
        wrapper --> @wrapper(argument)
        三层嵌套

    多个装饰器装饰一个函数：套娃
    